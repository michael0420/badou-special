import cv2
import numpy as np
from matplotlib import pyplot as plt


# 实现邻近插值算法
def nearest_interp(img):
    height, width, channels = img.shape
    empty_image = np.zeros((800, 800, channels), dtype="uint8")
    sh = 800/height
    sw = 800/width
    for i in range(800):
        for j in range(800):
            x = int(i/sh + 0.5)
            y = int(j/sw + 0.5)
            empty_image[i, j] = img[x, y]
    return empty_image


# 实现双线性插值算法
def bilinear_interp(img, out_dim):
    src_h, src_w, channel = img.shape
    dst_h, dst_w = out_dim[1], out_dim[0]
    if dst_h == src_h and dst_w == src_w:
        return img.copy()
    scale_h, scale_w = src_h/dst_h, src_w/dst_w
    dst_img = np.zeros((dst_h, dst_w, channel), dtype=np.uint8)
    for i in range(channel):
        for dst_y in range(dst_h):
            for dst_x in range(dst_w):
                src_x = (dst_x + 0.5) * scale_w - 0.5
                src_y = (dst_y + 0.5) * scale_h - 0.5

                src_x0 = int(np.floor(src_x))
                src_x1 = min(src_x0 + 1, src_w - 1)
                src_y0 = int(np.floor(src_y))
                src_y1 = min(src_y0 + 1, src_h - 1)

                temp0 = (src_x1 - src_x) * img[src_y0, src_x0, i] + (src_x - src_x0) * img[src_y0, src_x1, i]
                temp1 = (src_x1 - src_x) * img[src_y1, src_x0, i] + (src_x - src_x0) * img[src_y1, src_x1, i]
                dst_img[dst_y, dst_x, i] = (src_y1 - src_y) * temp0 + (src_y - src_y0) * temp1
    return dst_img


# 直方图均衡化
def histogram_equalization(img):
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    dst = cv2.equalizeHist(gray)
    hist = cv2.calcHist([dst], [0], None, [256], [0, 256])

    plt.figure()
    plt.hist(dst.ravel(), 256)
    plt.show()
    
    cv2.imshow("histogram equlization", np.hstack([gray, dst]))


if __name__ == '__main__':
    img = cv2.imread(r"D:\JetBrainsProjects\PycharmProjects\CV\lenna.png")
    # cv2.imshow("Original image", img)
    empty_image = nearest_interp(img)
    # cv2.imshow("image", empty_image)

    # cv2.imshow("src img", img)
    dst = bilinear_interp(img, (800, 800))
    # cv2.imshow("dst img", dst)

    histogram_equalization(img)

    cv2.waitKey()
