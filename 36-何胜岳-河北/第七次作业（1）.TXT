# 基于Keras库创建一个最简单的神经网络模型进行MNIST手写数字识别的试验

# 将训练数据和检测数据加载到内存中(第一次运行需要下载数据，会比较慢):
# train_images是用于训练系统的手写数字图片;
# train_labels是用于标注图片的信息;
# test_images是用于检测系统训练效果的图片；
# test_labels是test_images图片对应的数字标签。

#数据加载和确认
#MNIST数据集为Keras内置数据集，当然所谓的内置数据集并不是说数据文件本身内置于Tensorflow/Keras库，
#而是说其中封装了mnist数据处理相关函数，这样以以下方式导入mnist module，调用load_data()函数就会
#自动从网上下载MNIST数据。
#在同一环境中，下载后的数据会存放一个tensorflow/keras认识的数据缓存区，所以你不用担心它每次重新运行
# 会傻傻地重新下载。它会先检查以前是不是下载过，没有的话才会去重新下载。

from tensorflow.keras.datasets import mnist
(train_images,train_labels),(test_images,test_labels)=mnist.load_data()
#调用load_data()函数就会自动从网上下载MNIST数据。(分为两类数据)
print('train_images.shape=',train_images.shape)     #(60000, 28, 28)
print('train_labels=',train_labels)     #[5 0 4 ... 5 6 8]
print('test_images.shape=',test_images.shape)       #(10000, 28, 28)
print('test_labels=',test_labels)       #[7 2 1 ... 4 5 6]


# 1.train_images.shape打印结果表明，train_images是一个含有60000个元素的数组.
# 数组中的元素是一个二维数组，二维数组的行和列都是28.
# 也就是说，一个数字图片的大小是28*28.
# 2.train_lables打印结果表明，第一张手写数字图片的内容是数字5，第二种图片是数字0，以此类推.
# 3.test_images.shape的打印结果表示，用于检验训练效果的图片有10000张。
# 4.test_labels输出结果表明，用于检测的第一张图片内容是数字7，第二张是数字2，依次类推。


# 把用于测试的第一张图片打印出来看看

digit = test_images[0]    #第一张图片
import matplotlib.pyplot as plt
plt.imshow(digit, cmap=plt.cm.binary)
plt.show()
# 使用matplotlib 包可以打印出来读取的照片，要打印上述案例中读取的照片，只需要下面两行代码就行了。
# plt.imshow(img_plt , cmap=plt.cm.binary)
# plt.show()
# 图片三通道的，打印其中一个通道
# plt.imshow(img_plt[:,:,1] , cmap=plt.cm.binary)
# plt.show()


digit1=train_images[1]   #打印训练集第2张图片
import matplotlib.pyplot as plt
plt.imshow(digit1,cmap=plt.cm.binary)
plt.show()


# 使用tensorflow.Keras搭建一个有效识别图案的神经网络，
# 1.layers:表示神经网络中的一个数据处理层。(dense:全连接层)
# 2.models.Sequential():表示把每一个数据处理层串联起来.
# 3.layers.Dense(…):构造一个数据处理层。
# 4.input_shape(28*28,):表示当前处理层接收的数据格式必须是长和宽都是28的二维数组，
# 后面的“,“表示数组里面的每一个元素到底包含多少个数字都没有关系.

# from tensorflow.keras import models     #keras里面存储的用于构建模型的一些函数
# from tensorflow.keras import layers     #keras里面存储的用于构建层的一些函数
#
# network = models.Sequential()  #模型当前为空（表示把每一个数据处理层串联起来.）
# network.add(layers.Dense(512, activation='relu', input_shape=(28*28,)))
# #512：全链接层的节点个数，activation='relu'激活函数：relu，input_shape=(28*28,)输入数据为28*28（输入节点的个数为28*28）
# network.add(layers.Dense(10, activation='softmax'))
# #10：输出节点的个数，激活函数为softmax（用于多分类，将多个神经元的输出，映射到[0,1]区间内，可以看成概率来理解）
#
# network.compile(optimizer='rmsprop', loss='categorical_crossentropy',
#                metrics=['accuracy'])
# # compile：编译（保存），optimizer：优化选项（rmsprop：优化方法），loss：损失函数是什么（交叉熵），metrics：求准确率

from tensorflow.keras import models
from tensorflow.keras import layers
network=models.Sequential()
network.add(layers.Dense(512,activation='relu',input_shape=(28*28,)))
network.add(layers.Dense(10,activation='softmax'))
network.compile(optimizer='rmsprop',loss='categorical_crossentropy',metrics=['accuracy'])



# 在把数据输入到网络模型之前，把数据做归一化处理:
# 1.reshape(60000, 28*28）:train_images数组原来含有60000个元素，每个元素是一个28行，28列的二维数组，
# 现在把每个二维数组转变为一个含有28*28个元素的一维数组.
# 2.由于数字图案是一个灰度图，图片中每个像素点值的大小范围在0到255之间.
# 3.train_images.astype(“float32”)/255 把每个像素点的值从范围0-255转变为范围在0-1之间的浮点值。



train_images=train_images.reshape((60000,28*28))    #一维数组
train_images=train_images.astype('float32')/255     #把每个像素点的值从范围0-255转变为范围在0-1之间的浮点值。
test_images=test_images.reshape((10000,28*28))
test_images=test_images.astype('float32')/255


# 把图片对应的标记也做一个更改：
# 目前所有图片的数字图案对应的是0到9。
# 例如test_images[0]对应的是数字7的手写图案，那么其对应的标记test_labels[0]的值就是7。
# 我们需要把数值7变成一个含有10个元素的数组，然后在第8个元素设置为1，其他元素设置为0。
# 例如test_lables[0] 的值由7转变为数组[0,0,0,0,0,0,0,1,0,0] ---one hot


from tensorflow.keras.utils import to_categorical
# to_categorical就是将类别向量转换为二进制（只有0和1）的矩阵类型表示。其表现为将原有的类别向量转换为独热编码的形式
print("before change",test_labels[0])
train_labels=to_categorical(train_labels)
test_labels=to_categorical(test_labels)
print("after change:",test_labels[0])



# 把数据输入网络进行训练：
# train_images：用于训练的手写数字图片；
# train_labels：对应的是图片的标记；
# batch_size：每次网络从输入的图片数组中随机选取128个作为一组进行计算。
# epochs:每次计算的循环是五次



network.fit(train_images,train_labels,epochs=5,batch_size=128)      #批大小(Batch size)


# 测试数据输入，检验网络学习后的图片识别效果.
# 识别效果与硬件有关（CPU/GPU）.

test_loss,test_acc=network.evaluate(test_images,test_labels,verbose=1)
#model.evaluate函数预测给定输入的输出，# verbose=1：打印训练进度条
# model.evaluate 用于评估您训练的模型。它的输出是准确度或损失，而不是对输入数据的预测。
# model.predict 实际预测，其输出是目标值，根据输入数据预测。
print(test_loss)
print('test_acc',test_acc)


# 输入一张手写数字图片到网络中，看看它的识别效果

(train_images,train_labels),(test_images,test_labels)=mnist.load_data()
digit=test_images[1]
plt.imshow(digit,cmap=plt.cm.binary)
plt.show()

test_images=test_images.reshape((10000,28*28))  #推理的时候新输入的数据也需要进行reshape
res=network.predict(test_images)
# model.predict 实际预测，其输出是目标值，根据输入数据预测。
#predict()函数是Python中预测函数，常用于预测测试集数据，返回的是样本所属的类别标签。
#predict_proba()函数也是预测函数，但是与predict()函数不同的是，predict_proba()函数返回的
#是数组，是预测该样本为某个标签的概率值，并且每一行的概率和为1。

print(res)
for i in range(res[2].shape[0]):
    if (res[2][i]==1):
        print("the number for the picture is :",i)
        break

for i in range(res[1].shape[0]):#res[1]：序号为1的结果，.shape[0]：维度
    if (res[1][i] == 1): #res[1][i] == 1：res中的第一个值中的每一个值都为1
        print("the number for the picture is : ", i)
        break
